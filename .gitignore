def encode_input(user_input): """ Encodes user input into a numeric representation based on character mapping. """ # Define character-to-code mapping char_to_code = {chr(i + 97): f"{i:02}" for i in range(26)} char_to_code[' '] = '26'

encoded_string = ""

# Encode the input
for char in user_input:
    encoded_value = char_to_code.get(char.lower())
    if encoded_value:
        encoded_string += encoded_value  

# Convert encoded string to integer
try:
    BitNode = int(encoded_string)
except ValueError:
    BitNode = 0  

# Function to calculate sum of digits
def sum_of_digits(number: int) -> int:
    total = 0
    while number:
        total += number % 10
        number //= 10
    return total

# Display results
print(f"Seed: {sum_of_digits(BitNode)}")
print(f"(BitNode): {encoded_string}")

Get user input and encode

if name == "main": user_input = input("Enter text: ") encode_input(user_input)
